/*
 * Safekeeping Server
 * Safekeeping OpenAPI
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.safekeeping.cxf.rest.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.vmware.safekeeping.cxf.rest.model.AdapterType;
import com.vmware.safekeeping.cxf.rest.model.FileBackingInfoProvisioningType;
import com.vmware.safekeeping.cxf.rest.model.ManagedFcoEntityInfo;
import com.vmware.safekeeping.cxf.rest.model.OperationState;
import com.vmware.safekeeping.cxf.rest.model.ResultAction;
import com.vmware.safekeeping.cxf.rest.model.SapiTask;
import com.vmware.safekeeping.cxf.rest.model.VirtualDiskModeType;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Date;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * AbstractResultDiskBackupRestore
 */
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaJerseyServerCodegen", date = "2022-08-31T19:06:45.540Z[GMT]")public class AbstractResultDiskBackupRestore extends ResultAction  {
  @JsonProperty("TargetName")
  private String targetName = null;

  @JsonProperty("VDiskId")
  private String vdiskId = null;

  @JsonProperty("UsedTransportModes")
  private String usedTransportModes = null;

  @JsonProperty("RequestedTransportModes")
  private String requestedTransportModes = null;

  @JsonProperty("NumberOfThreads")
  private Integer numberOfThreads = null;

  @JsonProperty("VirtualDiskMode")
  private VirtualDiskModeType virtualDiskMode = null;

  @JsonProperty("DigestEnabled")
  private Boolean digestEnabled = null;

  @JsonProperty("TotalNumberOfDisks")
  private Integer totalNumberOfDisks = null;

  @JsonProperty("ProvisioningType")
  private FileBackingInfoProvisioningType provisioningType = null;

  @JsonProperty("Uuid")
  private Integer uuid = null;

  @JsonProperty("AdapterType")
  private AdapterType adapterType = null;

  @JsonProperty("BusNumber")
  private Integer busNumber = null;

  @JsonProperty("UnitNumber")
  private Integer unitNumber = null;

  @JsonProperty("CapacityInBytes")
  private Long capacityInBytes = null;

  @JsonProperty("ControllerKey")
  private Integer controllerKey = null;

  @JsonProperty("DeviceKey")
  private Integer deviceKey = null;

  @JsonProperty("DiskHandle")
  private Long diskHandle = null;

  @JsonProperty("DiskId")
  private Integer diskId = null;

  @JsonProperty("Flags")
  private Integer flags = null;

  @JsonProperty("MaxBlockSize")
  private Integer maxBlockSize = null;

  @JsonProperty("MaxBlockSizeInBytes")
  private Integer maxBlockSizeInBytes = null;

  @JsonProperty("Name")
  private String name = null;

  @JsonProperty("NumberOfBlocks")
  private Integer numberOfBlocks = null;

  public AbstractResultDiskBackupRestore targetName(String targetName) {
    this.targetName = targetName;
    return this;
  }

  /**
   * Get targetName
   * @return targetName
   **/
  @JsonProperty("TargetName")
  @Schema(description = "")
  public String getTargetName() {
    return targetName;
  }

  public void setTargetName(String targetName) {
    this.targetName = targetName;
  }

  public AbstractResultDiskBackupRestore vdiskId(String vdiskId) {
    this.vdiskId = vdiskId;
    return this;
  }

  /**
   * Get vdiskId
   * @return vdiskId
   **/
  @JsonProperty("VDiskId")
  @Schema(description = "")
  public String getVdiskId() {
    return vdiskId;
  }

  public void setVdiskId(String vdiskId) {
    this.vdiskId = vdiskId;
  }

  public AbstractResultDiskBackupRestore usedTransportModes(String usedTransportModes) {
    this.usedTransportModes = usedTransportModes;
    return this;
  }

  /**
   * Get usedTransportModes
   * @return usedTransportModes
   **/
  @JsonProperty("UsedTransportModes")
  @Schema(description = "")
  public String getUsedTransportModes() {
    return usedTransportModes;
  }

  public void setUsedTransportModes(String usedTransportModes) {
    this.usedTransportModes = usedTransportModes;
  }

  public AbstractResultDiskBackupRestore requestedTransportModes(String requestedTransportModes) {
    this.requestedTransportModes = requestedTransportModes;
    return this;
  }

  /**
   * Get requestedTransportModes
   * @return requestedTransportModes
   **/
  @JsonProperty("RequestedTransportModes")
  @Schema(description = "")
  public String getRequestedTransportModes() {
    return requestedTransportModes;
  }

  public void setRequestedTransportModes(String requestedTransportModes) {
    this.requestedTransportModes = requestedTransportModes;
  }

  public AbstractResultDiskBackupRestore numberOfThreads(Integer numberOfThreads) {
    this.numberOfThreads = numberOfThreads;
    return this;
  }

  /**
   * Get numberOfThreads
   * @return numberOfThreads
   **/
  @JsonProperty("NumberOfThreads")
  @Schema(description = "")
  public Integer getNumberOfThreads() {
    return numberOfThreads;
  }

  public void setNumberOfThreads(Integer numberOfThreads) {
    this.numberOfThreads = numberOfThreads;
  }

  public AbstractResultDiskBackupRestore virtualDiskMode(VirtualDiskModeType virtualDiskMode) {
    this.virtualDiskMode = virtualDiskMode;
    return this;
  }

  /**
   * Get virtualDiskMode
   * @return virtualDiskMode
   **/
  @JsonProperty("VirtualDiskMode")
  @Schema(description = "")
  @Valid
  public VirtualDiskModeType getVirtualDiskMode() {
    return virtualDiskMode;
  }

  public void setVirtualDiskMode(VirtualDiskModeType virtualDiskMode) {
    this.virtualDiskMode = virtualDiskMode;
  }

  public AbstractResultDiskBackupRestore digestEnabled(Boolean digestEnabled) {
    this.digestEnabled = digestEnabled;
    return this;
  }

  /**
   * Get digestEnabled
   * @return digestEnabled
   **/
  @JsonProperty("DigestEnabled")
  @Schema(description = "")
  public Boolean isDigestEnabled() {
    return digestEnabled;
  }

  public void setDigestEnabled(Boolean digestEnabled) {
    this.digestEnabled = digestEnabled;
  }

  public AbstractResultDiskBackupRestore totalNumberOfDisks(Integer totalNumberOfDisks) {
    this.totalNumberOfDisks = totalNumberOfDisks;
    return this;
  }

  /**
   * Get totalNumberOfDisks
   * @return totalNumberOfDisks
   **/
  @JsonProperty("TotalNumberOfDisks")
  @Schema(description = "")
  public Integer getTotalNumberOfDisks() {
    return totalNumberOfDisks;
  }

  public void setTotalNumberOfDisks(Integer totalNumberOfDisks) {
    this.totalNumberOfDisks = totalNumberOfDisks;
  }

  public AbstractResultDiskBackupRestore provisioningType(FileBackingInfoProvisioningType provisioningType) {
    this.provisioningType = provisioningType;
    return this;
  }

  /**
   * Get provisioningType
   * @return provisioningType
   **/
  @JsonProperty("ProvisioningType")
  @Schema(description = "")
  @Valid
  public FileBackingInfoProvisioningType getProvisioningType() {
    return provisioningType;
  }

  public void setProvisioningType(FileBackingInfoProvisioningType provisioningType) {
    this.provisioningType = provisioningType;
  }

  public AbstractResultDiskBackupRestore uuid(Integer uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * Get uuid
   * @return uuid
   **/
  @JsonProperty("Uuid")
  @Schema(description = "")
  public Integer getUuid() {
    return uuid;
  }

  public void setUuid(Integer uuid) {
    this.uuid = uuid;
  }

  public AbstractResultDiskBackupRestore adapterType(AdapterType adapterType) {
    this.adapterType = adapterType;
    return this;
  }

  /**
   * Get adapterType
   * @return adapterType
   **/
  @JsonProperty("AdapterType")
  @Schema(description = "")
  @Valid
  public AdapterType getAdapterType() {
    return adapterType;
  }

  public void setAdapterType(AdapterType adapterType) {
    this.adapterType = adapterType;
  }

  public AbstractResultDiskBackupRestore busNumber(Integer busNumber) {
    this.busNumber = busNumber;
    return this;
  }

  /**
   * Get busNumber
   * @return busNumber
   **/
  @JsonProperty("BusNumber")
  @Schema(description = "")
  public Integer getBusNumber() {
    return busNumber;
  }

  public void setBusNumber(Integer busNumber) {
    this.busNumber = busNumber;
  }

  public AbstractResultDiskBackupRestore unitNumber(Integer unitNumber) {
    this.unitNumber = unitNumber;
    return this;
  }

  /**
   * Get unitNumber
   * @return unitNumber
   **/
  @JsonProperty("UnitNumber")
  @Schema(description = "")
  public Integer getUnitNumber() {
    return unitNumber;
  }

  public void setUnitNumber(Integer unitNumber) {
    this.unitNumber = unitNumber;
  }

  public AbstractResultDiskBackupRestore capacityInBytes(Long capacityInBytes) {
    this.capacityInBytes = capacityInBytes;
    return this;
  }

  /**
   * Get capacityInBytes
   * @return capacityInBytes
   **/
  @JsonProperty("CapacityInBytes")
  @Schema(description = "")
  public Long getCapacityInBytes() {
    return capacityInBytes;
  }

  public void setCapacityInBytes(Long capacityInBytes) {
    this.capacityInBytes = capacityInBytes;
  }

  public AbstractResultDiskBackupRestore controllerKey(Integer controllerKey) {
    this.controllerKey = controllerKey;
    return this;
  }

  /**
   * Get controllerKey
   * @return controllerKey
   **/
  @JsonProperty("ControllerKey")
  @Schema(description = "")
  public Integer getControllerKey() {
    return controllerKey;
  }

  public void setControllerKey(Integer controllerKey) {
    this.controllerKey = controllerKey;
  }

  public AbstractResultDiskBackupRestore deviceKey(Integer deviceKey) {
    this.deviceKey = deviceKey;
    return this;
  }

  /**
   * Get deviceKey
   * @return deviceKey
   **/
  @JsonProperty("DeviceKey")
  @Schema(description = "")
  public Integer getDeviceKey() {
    return deviceKey;
  }

  public void setDeviceKey(Integer deviceKey) {
    this.deviceKey = deviceKey;
  }

  public AbstractResultDiskBackupRestore diskHandle(Long diskHandle) {
    this.diskHandle = diskHandle;
    return this;
  }

  /**
   * Get diskHandle
   * @return diskHandle
   **/
  @JsonProperty("DiskHandle")
  @Schema(description = "")
  public Long getDiskHandle() {
    return diskHandle;
  }

  public void setDiskHandle(Long diskHandle) {
    this.diskHandle = diskHandle;
  }

  public AbstractResultDiskBackupRestore diskId(Integer diskId) {
    this.diskId = diskId;
    return this;
  }

  /**
   * Get diskId
   * @return diskId
   **/
  @JsonProperty("DiskId")
  @Schema(description = "")
  public Integer getDiskId() {
    return diskId;
  }

  public void setDiskId(Integer diskId) {
    this.diskId = diskId;
  }

  public AbstractResultDiskBackupRestore flags(Integer flags) {
    this.flags = flags;
    return this;
  }

  /**
   * Get flags
   * @return flags
   **/
  @JsonProperty("Flags")
  @Schema(description = "")
  public Integer getFlags() {
    return flags;
  }

  public void setFlags(Integer flags) {
    this.flags = flags;
  }

  public AbstractResultDiskBackupRestore maxBlockSize(Integer maxBlockSize) {
    this.maxBlockSize = maxBlockSize;
    return this;
  }

  /**
   * Get maxBlockSize
   * @return maxBlockSize
   **/
  @JsonProperty("MaxBlockSize")
  @Schema(description = "")
  public Integer getMaxBlockSize() {
    return maxBlockSize;
  }

  public void setMaxBlockSize(Integer maxBlockSize) {
    this.maxBlockSize = maxBlockSize;
  }

  public AbstractResultDiskBackupRestore maxBlockSizeInBytes(Integer maxBlockSizeInBytes) {
    this.maxBlockSizeInBytes = maxBlockSizeInBytes;
    return this;
  }

  /**
   * Get maxBlockSizeInBytes
   * @return maxBlockSizeInBytes
   **/
  @JsonProperty("MaxBlockSizeInBytes")
  @Schema(description = "")
  public Integer getMaxBlockSizeInBytes() {
    return maxBlockSizeInBytes;
  }

  public void setMaxBlockSizeInBytes(Integer maxBlockSizeInBytes) {
    this.maxBlockSizeInBytes = maxBlockSizeInBytes;
  }

  public AbstractResultDiskBackupRestore name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   **/
  @JsonProperty("Name")
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public AbstractResultDiskBackupRestore numberOfBlocks(Integer numberOfBlocks) {
    this.numberOfBlocks = numberOfBlocks;
    return this;
  }

  /**
   * Get numberOfBlocks
   * @return numberOfBlocks
   **/
  @JsonProperty("NumberOfBlocks")
  @Schema(description = "")
  public Integer getNumberOfBlocks() {
    return numberOfBlocks;
  }

  public void setNumberOfBlocks(Integer numberOfBlocks) {
    this.numberOfBlocks = numberOfBlocks;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbstractResultDiskBackupRestore abstractResultDiskBackupRestore = (AbstractResultDiskBackupRestore) o;
    return Objects.equals(this.targetName, abstractResultDiskBackupRestore.targetName) &&
        Objects.equals(this.vdiskId, abstractResultDiskBackupRestore.vdiskId) &&
        Objects.equals(this.usedTransportModes, abstractResultDiskBackupRestore.usedTransportModes) &&
        Objects.equals(this.requestedTransportModes, abstractResultDiskBackupRestore.requestedTransportModes) &&
        Objects.equals(this.numberOfThreads, abstractResultDiskBackupRestore.numberOfThreads) &&
        Objects.equals(this.virtualDiskMode, abstractResultDiskBackupRestore.virtualDiskMode) &&
        Objects.equals(this.digestEnabled, abstractResultDiskBackupRestore.digestEnabled) &&
        Objects.equals(this.totalNumberOfDisks, abstractResultDiskBackupRestore.totalNumberOfDisks) &&
        Objects.equals(this.provisioningType, abstractResultDiskBackupRestore.provisioningType) &&
        Objects.equals(this.uuid, abstractResultDiskBackupRestore.uuid) &&
        Objects.equals(this.adapterType, abstractResultDiskBackupRestore.adapterType) &&
        Objects.equals(this.busNumber, abstractResultDiskBackupRestore.busNumber) &&
        Objects.equals(this.unitNumber, abstractResultDiskBackupRestore.unitNumber) &&
        Objects.equals(this.capacityInBytes, abstractResultDiskBackupRestore.capacityInBytes) &&
        Objects.equals(this.controllerKey, abstractResultDiskBackupRestore.controllerKey) &&
        Objects.equals(this.deviceKey, abstractResultDiskBackupRestore.deviceKey) &&
        Objects.equals(this.diskHandle, abstractResultDiskBackupRestore.diskHandle) &&
        Objects.equals(this.diskId, abstractResultDiskBackupRestore.diskId) &&
        Objects.equals(this.flags, abstractResultDiskBackupRestore.flags) &&
        Objects.equals(this.maxBlockSize, abstractResultDiskBackupRestore.maxBlockSize) &&
        Objects.equals(this.maxBlockSizeInBytes, abstractResultDiskBackupRestore.maxBlockSizeInBytes) &&
        Objects.equals(this.name, abstractResultDiskBackupRestore.name) &&
        Objects.equals(this.numberOfBlocks, abstractResultDiskBackupRestore.numberOfBlocks) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(targetName, vdiskId, usedTransportModes, requestedTransportModes, numberOfThreads, virtualDiskMode, digestEnabled, totalNumberOfDisks, provisioningType, uuid, adapterType, busNumber, unitNumber, capacityInBytes, controllerKey, deviceKey, diskHandle, diskId, flags, maxBlockSize, maxBlockSizeInBytes, name, numberOfBlocks, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbstractResultDiskBackupRestore {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    targetName: ").append(toIndentedString(targetName)).append("\n");
    sb.append("    vdiskId: ").append(toIndentedString(vdiskId)).append("\n");
    sb.append("    usedTransportModes: ").append(toIndentedString(usedTransportModes)).append("\n");
    sb.append("    requestedTransportModes: ").append(toIndentedString(requestedTransportModes)).append("\n");
    sb.append("    numberOfThreads: ").append(toIndentedString(numberOfThreads)).append("\n");
    sb.append("    virtualDiskMode: ").append(toIndentedString(virtualDiskMode)).append("\n");
    sb.append("    digestEnabled: ").append(toIndentedString(digestEnabled)).append("\n");
    sb.append("    totalNumberOfDisks: ").append(toIndentedString(totalNumberOfDisks)).append("\n");
    sb.append("    provisioningType: ").append(toIndentedString(provisioningType)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    adapterType: ").append(toIndentedString(adapterType)).append("\n");
    sb.append("    busNumber: ").append(toIndentedString(busNumber)).append("\n");
    sb.append("    unitNumber: ").append(toIndentedString(unitNumber)).append("\n");
    sb.append("    capacityInBytes: ").append(toIndentedString(capacityInBytes)).append("\n");
    sb.append("    controllerKey: ").append(toIndentedString(controllerKey)).append("\n");
    sb.append("    deviceKey: ").append(toIndentedString(deviceKey)).append("\n");
    sb.append("    diskHandle: ").append(toIndentedString(diskHandle)).append("\n");
    sb.append("    diskId: ").append(toIndentedString(diskId)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    maxBlockSize: ").append(toIndentedString(maxBlockSize)).append("\n");
    sb.append("    maxBlockSizeInBytes: ").append(toIndentedString(maxBlockSizeInBytes)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numberOfBlocks: ").append(toIndentedString(numberOfBlocks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
