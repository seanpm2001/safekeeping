/*
 * Safekeeping Server
 * Safekeeping OpenAPI
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.safekeeping.cxf.rest.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.vmware.safekeeping.cxf.rest.model.AbstractResultDiskBackupRestore;
import com.vmware.safekeeping.cxf.rest.model.AdapterType;
import com.vmware.safekeeping.cxf.rest.model.BackupDiskPhases;
import com.vmware.safekeeping.cxf.rest.model.BackupMode;
import com.vmware.safekeeping.cxf.rest.model.FileBackingInfoProvisioningType;
import com.vmware.safekeeping.cxf.rest.model.QueryBlocksOption;
import com.vmware.safekeeping.cxf.rest.model.VirtualDiskModeType;
import io.swagger.v3.oas.annotations.media.Schema;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * ResultActionDiskBackup
 */
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaJerseyServerCodegen", date = "2022-08-31T19:06:45.540Z[GMT]")public class ResultActionDiskBackup extends AbstractResultDiskBackupRestore implements OneOfTaskResultResult  {
  @JsonProperty("BackupMode")
  private BackupMode backupMode = null;

  @JsonProperty("ChangeId")
  private String changeId = null;

  @JsonProperty("GenerationId")
  private Integer generationId = null;

  @JsonProperty("Phase")
  private BackupDiskPhases phase = null;

  @JsonProperty("QueryBlocksOption")
  private QueryBlocksOption queryBlocksOption = null;

  @JsonProperty("TotalNumberOfDisks")
  private Integer totalNumberOfDisks = null;

  @JsonProperty("CbtHealth")
  private Boolean cbtHealth = null;

  @JsonProperty("Cipher")
  private Boolean cipher = null;

  @JsonProperty("Compressed")
  private Boolean compressed = null;

  @JsonProperty("NoChanges")
  private Boolean noChanges = null;

  public ResultActionDiskBackup backupMode(BackupMode backupMode) {
    this.backupMode = backupMode;
    return this;
  }

  /**
   * Get backupMode
   * @return backupMode
   **/
  @JsonProperty("BackupMode")
  @Schema(description = "")
  @Valid
  public BackupMode getBackupMode() {
    return backupMode;
  }

  public void setBackupMode(BackupMode backupMode) {
    this.backupMode = backupMode;
  }

  public ResultActionDiskBackup changeId(String changeId) {
    this.changeId = changeId;
    return this;
  }

  /**
   * Get changeId
   * @return changeId
   **/
  @JsonProperty("ChangeId")
  @Schema(description = "")
  public String getChangeId() {
    return changeId;
  }

  public void setChangeId(String changeId) {
    this.changeId = changeId;
  }

  public ResultActionDiskBackup generationId(Integer generationId) {
    this.generationId = generationId;
    return this;
  }

  /**
   * Get generationId
   * @return generationId
   **/
  @JsonProperty("GenerationId")
  @Schema(description = "")
  public Integer getGenerationId() {
    return generationId;
  }

  public void setGenerationId(Integer generationId) {
    this.generationId = generationId;
  }

  public ResultActionDiskBackup phase(BackupDiskPhases phase) {
    this.phase = phase;
    return this;
  }

  /**
   * Get phase
   * @return phase
   **/
  @JsonProperty("Phase")
  @Schema(description = "")
  @Valid
  public BackupDiskPhases getPhase() {
    return phase;
  }

  public void setPhase(BackupDiskPhases phase) {
    this.phase = phase;
  }

  public ResultActionDiskBackup queryBlocksOption(QueryBlocksOption queryBlocksOption) {
    this.queryBlocksOption = queryBlocksOption;
    return this;
  }

  /**
   * Get queryBlocksOption
   * @return queryBlocksOption
   **/
  @JsonProperty("QueryBlocksOption")
  @Schema(description = "")
  @Valid
  public QueryBlocksOption getQueryBlocksOption() {
    return queryBlocksOption;
  }

  public void setQueryBlocksOption(QueryBlocksOption queryBlocksOption) {
    this.queryBlocksOption = queryBlocksOption;
  }

  public ResultActionDiskBackup totalNumberOfDisks(Integer totalNumberOfDisks) {
    this.totalNumberOfDisks = totalNumberOfDisks;
    return this;
  }

  /**
   * Get totalNumberOfDisks
   * @return totalNumberOfDisks
   **/
  @JsonProperty("TotalNumberOfDisks")
  @Schema(description = "")
  public Integer getTotalNumberOfDisks() {
    return totalNumberOfDisks;
  }

  public void setTotalNumberOfDisks(Integer totalNumberOfDisks) {
    this.totalNumberOfDisks = totalNumberOfDisks;
  }

  public ResultActionDiskBackup cbtHealth(Boolean cbtHealth) {
    this.cbtHealth = cbtHealth;
    return this;
  }

  /**
   * Get cbtHealth
   * @return cbtHealth
   **/
  @JsonProperty("CbtHealth")
  @Schema(description = "")
  public Boolean isCbtHealth() {
    return cbtHealth;
  }

  public void setCbtHealth(Boolean cbtHealth) {
    this.cbtHealth = cbtHealth;
  }

  public ResultActionDiskBackup cipher(Boolean cipher) {
    this.cipher = cipher;
    return this;
  }

  /**
   * Get cipher
   * @return cipher
   **/
  @JsonProperty("Cipher")
  @Schema(description = "")
  public Boolean isCipher() {
    return cipher;
  }

  public void setCipher(Boolean cipher) {
    this.cipher = cipher;
  }

  public ResultActionDiskBackup compressed(Boolean compressed) {
    this.compressed = compressed;
    return this;
  }

  /**
   * Get compressed
   * @return compressed
   **/
  @JsonProperty("Compressed")
  @Schema(description = "")
  public Boolean isCompressed() {
    return compressed;
  }

  public void setCompressed(Boolean compressed) {
    this.compressed = compressed;
  }

  public ResultActionDiskBackup noChanges(Boolean noChanges) {
    this.noChanges = noChanges;
    return this;
  }

  /**
   * Get noChanges
   * @return noChanges
   **/
  @JsonProperty("NoChanges")
  @Schema(description = "")
  public Boolean isNoChanges() {
    return noChanges;
  }

  public void setNoChanges(Boolean noChanges) {
    this.noChanges = noChanges;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResultActionDiskBackup resultActionDiskBackup = (ResultActionDiskBackup) o;
    return Objects.equals(this.backupMode, resultActionDiskBackup.backupMode) &&
        Objects.equals(this.changeId, resultActionDiskBackup.changeId) &&
        Objects.equals(this.generationId, resultActionDiskBackup.generationId) &&
        Objects.equals(this.phase, resultActionDiskBackup.phase) &&
        Objects.equals(this.queryBlocksOption, resultActionDiskBackup.queryBlocksOption) &&
        Objects.equals(this.totalNumberOfDisks, resultActionDiskBackup.totalNumberOfDisks) &&
        Objects.equals(this.cbtHealth, resultActionDiskBackup.cbtHealth) &&
        Objects.equals(this.cipher, resultActionDiskBackup.cipher) &&
        Objects.equals(this.compressed, resultActionDiskBackup.compressed) &&
        Objects.equals(this.noChanges, resultActionDiskBackup.noChanges) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupMode, changeId, generationId, phase, queryBlocksOption, totalNumberOfDisks, cbtHealth, cipher, compressed, noChanges, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResultActionDiskBackup {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    backupMode: ").append(toIndentedString(backupMode)).append("\n");
    sb.append("    changeId: ").append(toIndentedString(changeId)).append("\n");
    sb.append("    generationId: ").append(toIndentedString(generationId)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    queryBlocksOption: ").append(toIndentedString(queryBlocksOption)).append("\n");
    sb.append("    totalNumberOfDisks: ").append(toIndentedString(totalNumberOfDisks)).append("\n");
    sb.append("    cbtHealth: ").append(toIndentedString(cbtHealth)).append("\n");
    sb.append("    cipher: ").append(toIndentedString(cipher)).append("\n");
    sb.append("    compressed: ").append(toIndentedString(compressed)).append("\n");
    sb.append("    noChanges: ").append(toIndentedString(noChanges)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
